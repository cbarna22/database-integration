/* IS 722 Group 3 Final Demo
Anna Tuz, Camille Barnard, Sumra Syed Afzal, Pravin Wamanrao Mohature

This program takes a global query and splits it up into subqueries mapped to local databases using a metadata table,
then executes each subquery. It prints out the global query, the subqueries, the tables for each subquery result, 
and a merged table with all the subquery results.

The following stored procedures are used:
createOutputTables - creates temporary tables for partial and merged output
showRows - prints tables to console
createSubqueries - checks if token has is a keyword or has a local mapping and appends token/mapping to subquery string
getNextTokenAndDelim - gets next token and delimiter (punctuation) in subquery string
outputLocalMappings - retrieves local mapping from metadata table
checkNull - checks if local mapping is null and casts to varchar if so (to avoid zero-length column error)
checkNum - casts numerical datatyppes to varchar so that columns can be merged using UNION
*/


SET SERVEROUTPUT ON;

DROP TABLE BOOKS CASCADE CONSTRAINTS;
DROP TABLE MUSIC_CDS CASCADE CONSTRAINTS;
DROP TABLE CUSTOMERS CASCADE CONSTRAINTS;
DROP TABLE PURCHASES CASCADE CONSTRAINTS;
DROP TABLE TB_USERINFO CASCADE CONSTRAINTS;
DROP TABLE TB_BOOKS CASCADE CONSTRAINTS;
DROP TABLE TB_CUSTOMER CASCADE CONSTRAINTS;
DROP TABLE TB_MUSICCD CASCADE CONSTRAINTS;
DROP TABLE TB_PURCHASE CASCADE CONSTRAINTS;
DROP TABLE TB_PDETAILS CASCADE CONSTRAINTS;
DROP TABLE BOOKS_S CASCADE CONSTRAINTS;
DROP TABLE MUSIC_CDS_S CASCADE CONSTRAINTS;
DROP TABLE PURCHASES_S CASCADE CONSTRAINTS;
DROP TABLE CUSTOMERS_S CASCADE CONSTRAINTS;
DROP TABLE CUSTOMER CASCADE CONSTRAINTS;
DROP TABLE PRODUCT CASCADE CONSTRAINTS;
DROP TABLE ORDERS CASCADE CONSTRAINTS;
DROP TABLE LINE_ITEMS CASCADE CONSTRAINTS;
DROP TABLE PAYMENT_DETAILS CASCADE CONSTRAINTS;
DROP TABLE KEYS CASCADE CONSTRAINTS;
DROP TABLE TB_METADATA CASCADE CONSTRAINTS;


/* CAMILLE BARNARD TABLES */

/* THE BOOKS TABLE CONTAINS THE PRIMARY KEY ISBN, ALONG WITH THE TITLE, AUTHOR, PRICE, CATEGORY (FICTION, NON-FICTION, GRAPHIC NOVEL, ETC), KEYWORDS, AND QUANTITY IN STOCK FOR EACH BOOK IN THE STORE'S INVENTORY. */

CREATE TABLE BOOKS(
ISBN CHAR(13) NOT NULL,
TITLE VARCHAR(50),
AUTHOR VARCHAR(50),
PRICE DECIMAL(4,2),
CATEGORY VARCHAR(30),
KEYWORDS VARCHAR(100),
QUANTITY INTEGER,
PRIMARY KEY (ISBN));


/* THE MUSIC_CDS TABLE CONTAINS THE PRIMARY KEY CD_ID, ALONG WITH THE TITLE, ARTIST, RECORDING COMPANY, PRICE, GENRE, AND QUANTITY IN STOCK FOR EACH CD IN THE STORE'S INVENTORY. */

CREATE TABLE MUSIC_CDS(
CD_ID INTEGER NOT NULL,
TITLE VARCHAR(50),
ARTIST VARCHAR(50),
RECORDING_COMPANY VARCHAR(30),
PRICE DECIMAL(4,2),
GENRE VARCHAR (30),
QUANTITY INTEGER,
PRIMARY KEY (CD_ID));

/* THE CUSTOMERS TABLE CONTAINS THE PRIMARY KEY CUSTOMER_ID, ALONG WITH THE NAME, ADDRESS, AND PHONE NUMBER FOR EACH OF THE STORE'S CUSTOMERS. */

CREATE TABLE CUSTOMERS(
CUSTOMER_ID INTEGER NOT NULL,
NAME VARCHAR(50),
ADDRESS VARCHAR(50),
PHONE_NUMBER VARCHAR(15),
PRIMARY KEY (CUSTOMER_ID));

/* THE PURCHASES TABLE CONTAINS THE PRIMARY KEY PURCHASE_ID, AS WELL AS THE FOREIGN KEYS ISBN, CD_ID, AND CUSTOMER_ID WHICH REFERENCE THE OTHER TABLES IN THE DATABASE. IT ALSO CONTAINS QUANTITY_PURCHASED AND THE TOTAL COST OF THE PURCHASE. */

CREATE TABLE PURCHASES(
PURCHASE_ID INTEGER NOT NULL,
ISBN CHAR(13),
CD_ID INTEGER,
CUSTOMER_ID INTEGER NOT NULL,
QUANTITY_PURCHASED INTEGER,
COST DECIMAL(6,2),
PRIMARY KEY (PURCHASE_ID),
FOREIGN KEY (ISBN) REFERENCES BOOKS(ISBN),
FOREIGN KEY (CD_ID) REFERENCES MUSIC_CDS(CD_ID),
FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(CUSTOMER_ID));


/* ANNA TUZ TABLES */

--INVENTORY DATABASE
--CREATING USER TABLE
CREATE TABLE TB_USERINFO (
    USRID INT,
    UNAME VARCHAR(30),
    USTATUS INT,--0 - ACTIVE, 1 - DEACTIVATED
    UCREATED DATE,
    PRIMARY KEY (USRID)
    );
--CREATING BOOKS TABLE
CREATE TABLE TB_BOOKS (
     BID VARCHAR(13),
     BTITLE VARCHAR(50),
     BAUTHOR VARCHAR(30),
     BPUBLISHER VARCHAR(30),
     BGENRE VARCHAR(10),
     BQUANTITY INT,
     BKEYWORDS VARCHAR(50),
     BPRICE NUMBER,
     BCREATED_BY INT,
     BMODIFIED TIMESTAMP,
     PRIMARY KEY (BID),
     FOREIGN KEY (BCREATED_BY) REFERENCES TB_USERINFO(USRID)
    );
--CREATING TABLE OF CUSTOMERS
CREATE TABLE TB_CUSTOMER (
    CID INT,
    CNAME VARCHAR(40),
    CDOB DATE,
    CPHONE VARCHAR(11),
    CADDRESS VARCHAR(40),
    CCREATED_BY INT,
    CMODIFIED TIMESTAMP,
    PRIMARY KEY (CID),
    FOREIGN KEY (CCREATED_BY) REFERENCES TB_USERINFO(USRID)
    );
--CREATING INVENTORY OF CDS
CREATE TABLE TB_MUSICCD (
    MID INT, 
    MARTIST VARCHAR(30),
    MTITLE VARCHAR(30),
    MGENRE VARCHAR(10),
    MQUANTITY INT,
    MYEAR NUMBER(4),
    MRECORDING_COMPANY VARCHAR(30),
    MPRICE NUMBER, 
    PRIMARY KEY (MID)
    );
--CREATING RECORDS OF PURCHASES
CREATE TABLE TB_PURCHASE (
    PID INT,
    PCUSTOMER INT,
    PAMOUNT NUMBER, 
    PCREATED_BY INT,
    PDATE TIMESTAMP,
    PRIMARY KEY (PID),
    FOREIGN KEY (PCUSTOMER) REFERENCES TB_CUSTOMER (CID),
    FOREIGN KEY (PCREATED_BY) REFERENCES TB_USERINFO (USRID)
    );
--CREATING PURCHASE DETAILS TABLE
CREATE TABLE TB_PDETAILS (
    PDID INT,
    PID INT,
    PBOOKSOLD VARCHAR(13),
    PCDSOLD INT,
    PQUANTITY INT,
    PRIMARY KEY (PDID),
    FOREIGN KEY (PID) REFERENCES TB_PURCHASE (PID),
    FOREIGN KEY (PBOOKSOLD) REFERENCES TB_BOOKS (BID),
    FOREIGN KEY (PCDSOLD) REFERENCES TB_MUSICCD (MID)
    );

/*SUMRA TABLES*/

CREATE TABLE BOOKS_S(
ISBN INT NOT NULL PRIMARY KEY,
TITLE VARCHAR(100),
AUTHOR VARCHAR(100),
PRICE FLOAT,
CATEGORY VARCHAR(100),
KEYWORDS VARCHAR(100)
);

CREATE TABLE MUSIC_CDS_S(
ID INT NOT NULL PRIMARY KEY,
TITLE VARCHAR(100),
ARTIST VARCHAR(100),
RECORDING_COMPANY VARCHAR(100),
PRICE FLOAT,
GENRE VARCHAR(100)
);

CREATE TABLE CUSTOMERS_S(
CID INT PRIMARY KEY,
NAME VARCHAR(100),
ADDRESS VARCHAR(100),
PHONE INT,
PRODUCT VARCHAR(100)
);

CREATE TABLE PURCHASES_S(
PID INT NOT NULL PRIMARY KEY,
CID INT NOT NULL,
PRODUCT_SOLD VARCHAR(100),
CUSTOMER VARCHAR(100),
QUANTITY VARCHAR(100),
AMOUNT FLOAT,
CONSTRAINT FK_CID FOREIGN KEY (CID) REFERENCES CUSTOMERS_S(CID)
);
/* PRAVIN MOHATURE TABLES */

---TABLE CREATION QUERIES---
CREATE TABLE CUSTOMER(CUSTOMER_ID INT, CNAME VARCHAR(20), CADDRESS VARCHAR(30), PHONE INT, EMAIL VARCHAR(20), PRIMARY KEY (CUSTOMER_ID));

CREATE TABLE PRODUCT(PRODUCT_ID INT, PNAME VARCHAR(20), DESCRIPTION VARCHAR(50), QUANTITY INT, PRICE INT, PRIMARY KEY (PRODUCT_ID));

CREATE TABLE ORDERS(ORDER_NUMBER INT, ORDER_DATE DATE, CUSTOMER_ID INT, NUMBER_OF_LINE_ITEMS INT, TOTAL_PRICE INT, PRIMARY KEY(ORDER_NUMBER), FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMER);

CREATE TABLE LINE_ITEMS(ITEM_NUMBER INT, ORDER_NUMBER INT, PRODUCT_ID INT, QUANTITY_ORDERED INT, PRIMARY KEY(ITEM_NUMBER,ORDER_NUMBER), FOREIGN KEY(ORDER_NUMBER) REFERENCES ORDERS, FOREIGN KEY(PRODUCT_ID) REFERENCES PRODUCT);

CREATE TABLE PAYMENT_DETAILS(PAYMENT_ID INT, ORDER_NUMBER INT, CARD_NUMBER INT, PRIMARY KEY(PAYMENT_ID), FOREIGN KEY(ORDER_NUMBER) REFERENCES ORDERS);



/* INSERTING VALUES INTO TABLES */

/* CAMILLE BARNARD VALUE INSERTION */

/* INSERTING ROWS INTO BOOKS TABLE */

INSERT INTO BOOKS(ISBN, TITLE, AUTHOR, PRICE, CATEGORY, KEYWORDS, QUANTITY) VALUES ('9780199232765', 'WAR AND PEACE', 'LEO TOLSTOY', 17.99, 'FICTION', 'HISTORICAL FICTION, ROMANCE, WAR, PHILOSOPHICAL FICTION', 13);
INSERT INTO BOOKS(ISBN, TITLE, AUTHOR, PRICE, CATEGORY, KEYWORDS, QUANTITY) VALUES ('9781635575637', 'PIRANESI', 'SUSANNA CLARKE', 14.29, 'FICTION', 'FANTASY, MYSTERY, MAGICAL REALISM', 8);
INSERT INTO BOOKS(ISBN, TITLE, AUTHOR, PRICE, CATEGORY, KEYWORDS, QUANTITY) VALUES ('9780241334140', 'BECOMING', 'MICHELLE OBAMA', 16.59, 'NON-FICTION', 'MEMOIR, BIOGRAPHY, AUTOBIOGRAPHY, POLITICS', 10);
INSERT INTO BOOKS(ISBN, TITLE, AUTHOR, PRICE, CATEGORY, KEYWORDS, QUANTITY) VALUES ('9781421561325', 'UZUMAKI', 'JUNJI ITO', 18.59, 'GRAPHIC NOVEL', 'HORROR, GRAPHIC NOVEL, SUPERNATURAL, MANGA', 4);
INSERT INTO BOOKS(ISBN, TITLE, AUTHOR, PRICE, CATEGORY, KEYWORDS, QUANTITY) VALUES ('9780316324977', 'THE FIFTH SEASON', 'N.K. JEMISIN', 14.99, 'FICTION', 'FANTASY, SCIENCE FICTION, DYSTOPIA', 11);
INSERT INTO BOOKS(ISBN, TITLE, AUTHOR, PRICE, CATEGORY, KEYWORDS, QUANTITY) VALUES ('9780593129463', 'IF I HAD YOUR FACE', 'FRANCES CHA', 12.99, 'FICTION', 'LITERARY FICTION, CONTEMPORARY', 18);
INSERT INTO BOOKS(ISBN, TITLE, AUTHOR, PRICE, CATEGORY, KEYWORDS, QUANTITY) VALUES ('9780333791035', 'THE GREAT GATSBY', 'F. SCOTT FITZGERALD', 8.99, 'FICTION', 'LITERARY FICTION, MODERNISM, SATIRE', 0);
INSERT INTO BOOKS(ISBN, TITLE, AUTHOR, PRICE, CATEGORY, KEYWORDS, QUANTITY) VALUES ('9780525510673', 'EDUCATED', 'GILLIAN FLYNN', 15.49, 'NON-FICTION', 'MEMOIR, BIOGRAPHY, AUTOBIOGRAPHY', 0);
INSERT INTO BOOKS(ISBN, TITLE, AUTHOR, PRICE, CATEGORY, KEYWORDS, QUANTITY) VALUES ('9780811300127', 'LABYRINTHS: SELECTED STORIES AND OTHER WRITINGS', 'JORGE LUIS BORGES', 10.49, 'FICTION', 'SHORT STORIES, ESSAYS, MAGICAL REALISM', 2);
INSERT INTO BOOKS(ISBN, TITLE, AUTHOR, PRICE, CATEGORY, KEYWORDS, QUANTITY) VALUES ('9781421580791', 'FRAGMENTS OF HORROR', 'JUNJI ITO', 12.99, 'GRAPHIC NOVEL', 'HORROR, GRAPHIC NOVEL, MANGA', 0);


/* INSERTING ROWS INTO MUSIC_CDS TABLE */

INSERT INTO MUSIC_CDS(CD_ID, TITLE, ARTIST, RECORDING_COMPANY, PRICE, GENRE, QUANTITY) VALUES (100001, 'NEIL DIAMOND ALL TIME GREATEST HITS', 'NEIL DIAMOND', 'BANG RECORDS', 10.97, 'POP', 6);
INSERT INTO MUSIC_CDS(CD_ID, TITLE, ARTIST, RECORDING_COMPANY, PRICE, GENRE, QUANTITY) VALUES (100002, 'LEGEND', 'BOB MARLEY', 'ISLAND RECORDS', 12.23, 'REGGAE', 9);
INSERT INTO MUSIC_CDS(CD_ID, TITLE, ARTIST, RECORDING_COMPANY, PRICE, GENRE, QUANTITY) VALUES (100003, '30', 'ADELE', 'XL RECORDINGS', 9.22, 'POP', 3);
INSERT INTO MUSIC_CDS(CD_ID, TITLE, ARTIST, RECORDING_COMPANY, PRICE, GENRE, QUANTITY) VALUES (100004, 'BILLIE HOLIDAY ULTIMATE COLLECTION', 'BILLIE HOLIDAY', 'VERVE RECORDS', 11.95, 'JAZZ', 7);
INSERT INTO MUSIC_CDS(CD_ID, TITLE, ARTIST, RECORDING_COMPANY, PRICE, GENRE, QUANTITY) VALUES (100005, 'A CHARLIE BROWN CHRISTMAS', 'VINCE GUARALDI', 'FANTASY RECORDS', 11.31, 'JAZZ', 12);
INSERT INTO MUSIC_CDS(CD_ID, TITLE, ARTIST, RECORDING_COMPANY, PRICE, GENRE, QUANTITY) VALUES (100006, 'QUEEN: GREATEST HITS I AND II', 'QUEEN', 'UNIVERSAL MUSIC GROUP', 12.99, 'ROCK', 9);
INSERT INTO MUSIC_CDS(CD_ID, TITLE, ARTIST, RECORDING_COMPANY, PRICE, GENRE, QUANTITY) VALUES (100007, 'WISH YOU WERE HERE', 'PINK FLOYD', 'PARLOPHONE', 9.99, 'ROCK', 1);
INSERT INTO MUSIC_CDS(CD_ID, TITLE, ARTIST, RECORDING_COMPANY, PRICE, GENRE, QUANTITY) VALUES (100008, 'RUBBER SOUL', 'THE BEATLES', 'APPLE RECORDS', 12.97, 'ROCK', 4);
INSERT INTO MUSIC_CDS(CD_ID, TITLE, ARTIST, RECORDING_COMPANY, PRICE, GENRE, QUANTITY) VALUES (100009, 'HAPPIER THAN EVER', 'BILLIE EILISH', 'INTERSCOPE RECORDS', 12.59, 'ALTERNATIVE', 0);
INSERT INTO MUSIC_CDS(CD_ID, TITLE, ARTIST, RECORDING_COMPANY, PRICE, GENRE, QUANTITY) VALUES (100010, 'LUSH', 'MITSKI', 'DON GIOVANNI RECORDS', 10.49, 'ALTERNATIVE', 0);


/* INSERTING ROWS INTO CUSTOMERS TABLE */

INSERT INTO CUSTOMERS(CUSTOMER_ID, NAME, ADDRESS, PHONE_NUMBER) VALUES (30100, 'NANCY WRIGHT', '401 TIMBER PLACE', '444-555-6666');
INSERT INTO CUSTOMERS(CUSTOMER_ID, NAME, ADDRESS, PHONE_NUMBER) VALUES (30101, 'RONAN RAMOS', '899 OCEAN ROAD', '444-808-7777');
INSERT INTO CUSTOMERS(CUSTOMER_ID, NAME, ADDRESS, PHONE_NUMBER) VALUES (30102, 'NORA KEENAN', '102 SUNSET LANE', '433-111-2222');
INSERT INTO CUSTOMERS(CUSTOMER_ID, NAME, ADDRESS, PHONE_NUMBER) VALUES (30103, 'MOHAMMED ANDRADE', '722 MOONBEAM ROAD', '444-222-3333');
INSERT INTO CUSTOMERS(CUSTOMER_ID, NAME, ADDRESS, PHONE_NUMBER) VALUES (30104, 'MAYA FULTON', '232 MAHOGANY DRIVE', '444-363-3333');
INSERT INTO CUSTOMERS(CUSTOMER_ID, NAME, ADDRESS, PHONE_NUMBER) VALUES (30105, 'ALIA SOLOMON', '991 OAK STREET', '433-909-9999');
INSERT INTO CUSTOMERS(CUSTOMER_ID, NAME, ADDRESS, PHONE_NUMBER) VALUES (30106, 'VERONICA DAVIDSON', '993 OAK STREET', '433-866-4555');
INSERT INTO CUSTOMERS(CUSTOMER_ID, NAME, ADDRESS, PHONE_NUMBER) VALUES (30107, 'BEN TERRELL', '166 MAPLE LANE', '444-333-5656');
INSERT INTO CUSTOMERS(CUSTOMER_ID, NAME, ADDRESS, PHONE_NUMBER) VALUES (30108, 'MELODY HAYWARD', '545 WILLOW STREET', '433-515-1111');
INSERT INTO CUSTOMERS(CUSTOMER_ID, NAME, ADDRESS, PHONE_NUMBER) VALUES (30109, 'BRENDA PARK', '888 CHERRY ROAD', '444-151-5555');

/* INSERTING ROWS INTO PURCHASES TABLE */

INSERT INTO PURCHASES(PURCHASE_ID, ISBN, CD_ID, CUSTOMER_ID, QUANTITY_PURCHASED, COST) VALUES (70000, '9780199232765', NULL, 30100, 1, 17.99);
INSERT INTO PURCHASES(PURCHASE_ID, ISBN, CD_ID, CUSTOMER_ID, QUANTITY_PURCHASED, COST) VALUES (70001, NULL, 100006, 30100, 1, 12.99);
INSERT INTO PURCHASES(PURCHASE_ID, ISBN, CD_ID, CUSTOMER_ID, QUANTITY_PURCHASED, COST) VALUES (70002, NULL, 100003, 30101, 2, 18.44);
INSERT INTO PURCHASES(PURCHASE_ID, ISBN, CD_ID, CUSTOMER_ID, QUANTITY_PURCHASED, COST) VALUES (70003, '9780241334140', NULL, 30102, 1, 16.59);
INSERT INTO PURCHASES(PURCHASE_ID, ISBN, CD_ID, CUSTOMER_ID, QUANTITY_PURCHASED, COST) VALUES (70004, '9780241334140', NULL, 30105, 1, 16.59);
INSERT INTO PURCHASES(PURCHASE_ID, ISBN, CD_ID, CUSTOMER_ID, QUANTITY_PURCHASED, COST) VALUES (70005, '9780241334140', NULL, 30106, 1, 16.59);
INSERT INTO PURCHASES(PURCHASE_ID, ISBN, CD_ID, CUSTOMER_ID, QUANTITY_PURCHASED, COST) VALUES (70006, NULL, 100008, 30106, 1, 12.97);
INSERT INTO PURCHASES(PURCHASE_ID, ISBN, CD_ID, CUSTOMER_ID, QUANTITY_PURCHASED, COST) VALUES (70007, NULL, 100008, 30102, 1, 12.97);
INSERT INTO PURCHASES(PURCHASE_ID, ISBN, CD_ID, CUSTOMER_ID, QUANTITY_PURCHASED, COST) VALUES (70008, NULL, 100008, 30108, 1, 12.97);
INSERT INTO PURCHASES(PURCHASE_ID, ISBN, CD_ID, CUSTOMER_ID, QUANTITY_PURCHASED, COST) VALUES (70009, '9780316324977', NULL, 30109, 2, 29.98);



/* ANNA TUZ VALUE INSERTION */

--POPULATING TABLE WITH DATA
INSERT INTO TB_USERINFO
VALUES (1,'PETER SMITH',0,'11-APR-2022');
INSERT INTO TB_USERINFO
VALUES (2,'SAMANTHA GRIT',0,'2-DEC-2020');
INSERT INTO TB_USERINFO
VALUES (3,'JULIA PINO',0,'8-NOV-2021');
INSERT INTO TB_USERINFO
VALUES (4,'PRI SOTO',1,'11-MAR-2016');
INSERT INTO TB_USERINFO
VALUES (5,'SAM GONZALES',1,'2-DEC-2019');
INSERT INTO TB_USERINFO
VALUES (6,'PHILIP MARTIN',0,'10-OCT-2020');
INSERT INTO TB_USERINFO
VALUES (7,'REEVE SAM',0,'19-FEB-2015');
INSERT INTO TB_USERINFO
VALUES (8,'KEN COOK',0,'2-MAY-2018');

INSERT INTO TB_BOOKS
VALUES ('9781454947577','PRIDE AND PREJUDICE','AUSTEN, JANE','UNION SQUARE AND CO.','CLASSICS',10,'CLASSICS,JANE AUSTEN, SOFTCOVER',39.99, 2, 
TIMESTAMP '2022-9-13 17:10:30.75');
INSERT INTO TB_BOOKS
VALUES ('9780692224847','HONEY QUEEN', 'MERCER, CHRISTINA','CHRISTINA MERCER','CHILDREN',6,'YOUNG ADULT, PARANORMAL,FANTASY,FICTION',10.99, 3, 
TIMESTAMP '2015-1-12 14:15:01.71');
INSERT INTO TB_BOOKS
VALUES ('9780007826478','JUST LIKE ANIMALS.WERELOCK EVOLUTION #5', 'IVERS, HETTIE','PENGUIN PUBLISHING GROUP','ROMANCE',2,'ROMANCE,ADULT,SHAPESHIFTERS,PARANORMAL,FANTASY',12.00, 1, 
TIMESTAMP '2019-5-9 10:09:05.55');
INSERT INTO TB_BOOKS
VALUES ('9780156035156','THE PRINCESS BRIDE', 'GOLDMAN,WILLIAM','HARPERCOLLINS PUBLISHERS','CLASSICS',3,'CLASSICS,FANTASY,FICTION,ROMANCE,HUMOR, ADVENTURE',7.00, 3, 
TIMESTAMP '3008-4-19 07:09:05.55');
INSERT INTO TB_BOOKS
VALUES ('9780812979794','ELIZABETH THE QUEEN: THE LIFE OF A MODERN MONARCH', 'SMITH,SALLY BEDELL','RANDOM HOUSE PUBLISHING GROUP','NONFICTION',10,'NON-FICTION,ROMANCE,BIOGRAPHY,HISTORY,BESTSELLER',17.00, 2, 
TIMESTAMP '2012-10-30 19:02:01.55');
INSERT INTO TB_BOOKS
VALUES ('9780525508168','THE COMFORT BOOK', 'HAIG, MATT','RANDOM HOUSE PUBLISHING GROUP','NONFICTION',8,'NON-FICTION,SELF-HELP,DEPRESSION,BESTSELLER',18.49, 1, 
TIMESTAMP '2021-07-20 19:02:01.55');
INSERT INTO TB_BOOKS
VALUES ('9780525508351','THE PEACE BOOK', 'HAIG, MATT','RANDOM HOUSE PUBLISHING GROUP','NONFICTION',0,'NON-FICTION,SELF-HELP,DEPRESSION,BESTSELLER',18.49, 1, 
TIMESTAMP '2021-07-20 19:02:01.55');
INSERT INTO TB_BOOKS
VALUES ('9780593191675','COURAGE IS CALLING: FORTUNE FAVORS THE BRAVE', 'HOLIDAY, RYAN','PENGUIN PUBLISHING GROUP','NONFICTION',5,'NON-FICTION,SELF-HELP,FEAR,BESTSELLER',20.49, 3, 
TIMESTAMP '2021-09-28 10:04:25.55');

INSERT INTO TB_CUSTOMER
VALUES (1,'SARAH LEIGH','8-NOV-1992','4107584412','25 COVER LANE, HANOVER, MD',3, TIMESTAMP '2021-9-11 17:10:30.75');
INSERT INTO TB_CUSTOMER
VALUES (2,'ALBERTO TWIN','22-FEB-1989','4434548787','25 QUATERFIELD RD, SEVERN, MD',2, TIMESTAMP '2020-2-2 14:10:30.75');
INSERT INTO TB_CUSTOMER
VALUES (3,'MICHAEL RIVIERA','7-JAN-1985','3014948781','364 MAIN RD, STEVENSVILLE, MD',1, TIMESTAMP '2019-6-1 12:00:30.75');
INSERT INTO TB_CUSTOMER
VALUES (4,'ALFRED IVLIN','1-JUN-1980','2014918589','3 CATHEDRAL ST, ANNAPOLIS, MD',3, TIMESTAMP '2019-6-1 12:00:30.75');
INSERT INTO TB_CUSTOMER
VALUES (5,'JEFF JENSEN','1-JUN-1971','4854551127','100 FREEDOM CRL, ELLICOTT CITY, MD',3, TIMESTAMP '2019-6-1 12:00:30.75');

INSERT INTO TB_MUSICCD
VALUES (1,'RICK PINO','UNDISCOVERED','RELAX',7,'3008','AMAZON MUSIC', 8.99);
INSERT INTO TB_MUSICCD
VALUES (2,'PAUL WILBUR','DESERT RAIN','PRAISE',2,'2012','INSPIRATION PRODUCTION', 10.99);
INSERT INTO TB_MUSICCD
VALUES (3,'BROOKE LIGERTWOOD','SEVEN','WORSHIP',6,'2022','HILLSONG RECORDS', 15.99);
INSERT INTO TB_MUSICCD
VALUES (4,'JENNIFER LOPEZ','MARRY ME','SOUNDTRACK',4,'2022','SONY MUSIC', 14.99);
INSERT INTO TB_MUSICCD
VALUES (5,'JUSTIN TIMBERLAKE','MAN OF WOODS','POP',7,'3008','MYSELF RECORDING', 12.99);
INSERT INTO TB_MUSICCD
VALUES (6,'MICHAEL JACKSON','THRILLER','POP',2,'3006','COLUMBIA', 10.99);
INSERT INTO TB_MUSICCD
VALUES (7,'BROOKE FRAZER','FLAGS','POP',1,'2010','SONY MUSIC ENT.', 11.99);
INSERT INTO TB_MUSICCD
VALUES (8,'RICKY MARTIN','A QUIEN QUIERA ESCUCHAR','POP',0,'2015','SONY LATIN', 18.99);
INSERT INTO TB_MUSICCD
VALUES (9,'WHITNEY HOUSTON','I WILL ALWAYS LOVE YOU','POP',0,'2012','RCA', 20.99);

INSERT INTO TB_PURCHASE
VALUES (1,1,17.98,1,DATE'2022-2-1');
INSERT INTO TB_PURCHASE
VALUES (2,3,20.49,1,DATE'2022-4-1');
INSERT INTO TB_PURCHASE
VALUES (3,2,17,1,DATE'2022-9-1');
INSERT INTO TB_PURCHASE
VALUES (4,2,17,2,DATE'2022-3-1');
INSERT INTO TB_PURCHASE
VALUES (5,3,34,2,DATE'2022-3-5');
INSERT INTO TB_PURCHASE
VALUES (6,5,51,2,DATE'2022-4-25');
INSERT INTO TB_PURCHASE
VALUES (7,3,10.99,1,DATE'2022-6-20');

INSERT INTO TB_PDETAILS
VALUES (1,3,'9780812979794',NULL,1);
INSERT INTO TB_PDETAILS
VALUES (2,2,'9780593191675',NULL,3);
INSERT INTO TB_PDETAILS
VALUES (3,4,'9780812979794',NULL,1);
INSERT INTO TB_PDETAILS
VALUES (4,5,'9780812979794',NULL,1);
INSERT INTO TB_PDETAILS
VALUES (5,6,'9780812979794',NULL,1);
INSERT INTO TB_PDETAILS
VALUES (6,1,NULL,3,1);
INSERT INTO TB_PDETAILS
VALUES (7,1,NULL,3,1);

/* PRAVIN VALUE INSERTION */

INSERT INTO CUSTOMER VALUES(1, 'JOHM MILLER', '3320 WASHINGTOM BLVD', 9876543210, 'JOHN@UMBC.EDU');
INSERT INTO CUSTOMER VALUES(2, 'VAN LUISE', '1000 HILTOP CIRCLE', 9085765432, 'VAN@UMBC.EDU');
INSERT INTO CUSTOMER VALUES(3, 'MIKE ROSE', '1346 STEVENS AVE', 9876532210, 'MIKE@UMBC.EDU');
INSERT INTO CUSTOMER VALUES(4, 'PHILL SEAMAN', '1209 MAIDEN CHOICE', 9879043210, 'PHILL@UMBC.EDU');
INSERT INTO CUSTOMER VALUES(5, 'HARVEY SPECTURE', '9434 LEEDS AVE', 8946543210, 'HARVEY@UMBC.EDU');
INSERT INTO CUSTOMER VALUES(6, 'DONNA PAULSON', '159 S MOUNT RIDGE', 8946432445, 'DONNA@UMBC.EDU');
INSERT INTO CUSTOMER VALUES(7, 'RACHEL ZEN', '9794 GREENWOOD', 8934243210, 'RACHEL@UMBC.EDU');
INSERT INTO CUSTOMER VALUES(8, 'JESSICA PEARSON', '2323 FERNLEY', 8946289210, 'JESSICA@UMBC.EDU');
INSERT INTO CUSTOMER VALUES(9, 'LUIS LITT', '4324 WILKENS AVE', 5336543210, 'LUIS@UMBC.EDU');
INSERT INTO CUSTOMER VALUES(10, 'GABRIAL MATCH', '5234 S ARBUTUS', 9473543210, 'GABRIAL@UMBC.EDU');


INSERT INTO PRODUCT VALUES(1, 'LAPTOP', 'MACBOOK AIR 13 INCH', 10, 999);
INSERT INTO PRODUCT VALUES(2, 'TABLET', 'IPAD PRO 11 INCH', 9, 799);
INSERT INTO PRODUCT VALUES(3, 'LAPTOP', 'HP PROBOOK G9 14 INCH', 15, 1099);
INSERT INTO PRODUCT VALUES(4, 'DESKTOP', 'HP ELITEONE 800 G6 ALL-IN-ONE PC - CUSTOMIZABLE', 5, 1999);
INSERT INTO PRODUCT VALUES(5, 'DESKTOP', 'OPTIPLEX 3280 ALL-IN-ONE', 8, 699);
INSERT INTO PRODUCT VALUES(6, 'PHONE', 'IPHONE 14 PRO 5G 256GB', 18, 1099);
INSERT INTO PRODUCT VALUES(7, 'PHONE', 'GALAXY Z FOLD4 5G 256GB', 10, 899);
INSERT INTO PRODUCT VALUES(8, 'PHONE', 'ONEPLUS 10 PRO 5G 16 256GB', 5, 749);
INSERT INTO PRODUCT VALUES(9, 'DESKTOP', 'OPTIPLEX 7400 ALL-IN-ONE', 8, 1429);
INSERT INTO PRODUCT VALUES(10, 'DESKTOP', 'HP PAVILION ALL-IN-ONE 27-CA1055T', 20, 875);
INSERT INTO PRODUCT VALUES(11, 'DESKTOP', 'HP PAVILION GAMING DESKTOP TG01-2170M PC', 3, 580);
INSERT INTO PRODUCT VALUES(12, 'DESKTOP', 'APPLE - 27" IMAC® 8GB MEMORY - 512GB SSD', 5, 1999);


INSERT INTO ORDERS VALUES(1, DATE'2022-08-01', 2, 2, 2753);
INSERT INTO ORDERS VALUES(2, DATE'2022-08-02', 4, 1, 1587);
INSERT INTO ORDERS VALUES(3, DATE'2022-08-12', 5, 4, 5168);
INSERT INTO ORDERS VALUES(4, DATE'2022-09-21', 1, 3, 4955);
INSERT INTO ORDERS VALUES(5, DATE'2022-08-14', 10, 3, 3661);
INSERT INTO ORDERS VALUES(6, DATE'2022-08-21', 6, 2, 8089);
INSERT INTO ORDERS VALUES(7, DATE'2022-09-18', 8, 3, 4024);
INSERT INTO ORDERS VALUES(8, DATE'2022-09-26', 2, 4, 6498);
INSERT INTO ORDERS VALUES(9, DATE'2022-08-31', 9, 1, 1791);
INSERT INTO ORDERS VALUES(10, DATE'2022-09-09', 10, 1, 2119);


INSERT INTO LINE_ITEMS VALUES(1, 1, 1, 1);
INSERT INTO LINE_ITEMS VALUES(2, 1, 2, 2);
INSERT INTO LINE_ITEMS VALUES(1, 2, 8, 2);
INSERT INTO LINE_ITEMS VALUES(1, 3, 5, 1);
INSERT INTO LINE_ITEMS VALUES(2, 3, 8, 1);
INSERT INTO LINE_ITEMS VALUES(3, 3, 9, 1);
INSERT INTO LINE_ITEMS VALUES(4, 3, 4, 1);
INSERT INTO LINE_ITEMS VALUES(1, 5, 10, 1);
INSERT INTO LINE_ITEMS VALUES(2, 5, 11, 1);
INSERT INTO LINE_ITEMS VALUES(3, 5, 12, 1);
INSERT INTO LINE_ITEMS VALUES(1, 6, 6, 2);
INSERT INTO LINE_ITEMS VALUES(2, 6, 7, 1);
INSERT INTO LINE_ITEMS VALUES(1, 7, 4, 1);
INSERT INTO LINE_ITEMS VALUES(2, 7, 5, 1);
INSERT INTO LINE_ITEMS VALUES(3, 7, 6, 1);
INSERT INTO LINE_ITEMS VALUES(1, 8, 7, 1);
INSERT INTO LINE_ITEMS VALUES(2, 8, 8, 2);
INSERT INTO LINE_ITEMS VALUES(3, 8, 9, 2);
INSERT INTO LINE_ITEMS VALUES(4, 8, 10, 1);
INSERT INTO LINE_ITEMS VALUES(1, 9, 9, 2);
INSERT INTO LINE_ITEMS VALUES(1, 10, 4, 1);
INSERT INTO LINE_ITEMS VALUES(1, 4, 1, 1);
INSERT INTO LINE_ITEMS VALUES(2, 4, 8, 3);
INSERT INTO LINE_ITEMS VALUES(3, 4, 9, 1);
INSERT INTO LINE_ITEMS VALUES(4, 4, 2, 1);


INSERT INTO PAYMENT_DETAILS VALUES(1, 1, 987698769876);
INSERT INTO PAYMENT_DETAILS VALUES(2, 2, 123412341234);
INSERT INTO PAYMENT_DETAILS VALUES(3, 3, 345634563456);
INSERT INTO PAYMENT_DETAILS VALUES(4, 4, 123456789012);
INSERT INTO PAYMENT_DETAILS VALUES(5, 5, 789078907890);
INSERT INTO PAYMENT_DETAILS VALUES(6, 6, 567856785678);
INSERT INTO PAYMENT_DETAILS VALUES(7, 7, 345634560987);
INSERT INTO PAYMENT_DETAILS VALUES(8, 8, 123487651234);
INSERT INTO PAYMENT_DETAILS VALUES(9, 9, 123456780987);
INSERT INTO PAYMENT_DETAILS VALUES(10, 10, 432143214321);


/* SUMRA VALUE INSERTION */
---BOOKS TABLE
INSERT INTO BOOKS_S VALUES (1000000000, 'GONE GIRL', 'GILLIAN FLYNN', 25, 'FICTION', 'THRILLER, CRIME, BLOOD');
INSERT INTO BOOKS_S VALUES (1000000001, 'NANNY', 'DREW BARRYMORE', 30, 'COMEDY', 'AMUSING, SATIRE, ABSURD');
INSERT INTO BOOKS_S VALUES (1000000002, 'THE RING', 'SAMARA', 15, 'HORROR', 'HAUNTINGS, REVENGE, VENGEANCE');
INSERT INTO BOOKS_S VALUES (1000000003, 'THE NOTEBOOK', 'EDGAR FINN', 44.99, 'ROMANTIC', 'LOVE, DATING, EMOTIONAL');
INSERT INTO BOOKS_S VALUES (1000000004, 'RAINBOW DREAMS', 'GILLIAN FLYNN', 50, 'COMEDY', 'DARK COMEDY, SATIRE, INSPIRATIONAL');
INSERT INTO BOOKS_S VALUES (1000000005, 'VENOM', 'EDGAR FINN', 12, 'ACTION', 'FIGHTING, BLOOD AND GORE, DEATHS');
--INSERT INTO BOOKS VALUES (1000000007, 'CONJURING', 39, 'HORROR', 'VIOLENT, PSYCHOLOGICAL, THRILLER');
--INSERT INTO BOOKS VALUES (1000000008, 'MINIONS', 12, 'CHILDREN’S LITERATURE', 'HEART-FELT, MAGICAL, EXCITING');
--INSERT INTO BOOKS VALUES (1000000009, 'ANGELIC LIFE', 14, 'ROMANTIC', 'ROM-COM, DRAMA, INSPIRATIONAL');

-----MUSIC TABLE
INSERT INTO MUSIC_CDS_S VALUES (1, 'THE ESSENTIAL MJ', 'MICHAEL JACKSON', 'LEGACY RECORDINGS', 3.99, 'POP');
INSERT INTO MUSIC_CDS_S VALUES (2, 'BAD', 'MICHAEL JACKSON', 'LEGACY RECORDINGS', 4.50, 'POP');
INSERT INTO MUSIC_CDS_S VALUES (3, 'ATTITUDE', 'ADELE', 'UNIDISC RECORDS', 2, 'JAZZ');
INSERT INTO MUSIC_CDS_S VALUES (4, 'CARPE DIEM', 'DEMI LOVATO', 'MILITIA GUARD MUSIC', 12, 'ROCK');
INSERT INTO MUSIC_CDS_S VALUES (5, '89', 'TAYLOR SWIFT', 'UNIVERSAL', 18, 'CLASSICAL');

----CUSTOMER TABLE
INSERT INTO CUSTOMERS_S VALUES(10, 'SELENA GOMEZ', '4752 WESTLAND MD 21227', 1234567890, 'GONE GIRL');
INSERT INTO CUSTOMERS_S VALUES(11, 'SERENA WILLIAMS', '300 BELWOOD GRN MD 21300', 2345678901, '89');
INSERT INTO CUSTOMERS_S VALUES(12, 'CHRIS BROWN', '300 CAROL GARDENS MD 21250', 3456789012, 'THE ESSENTIAL MJ');
INSERT INTO CUSTOMERS_S VALUES(13, 'JAY ZEE', '5000 MAIDEN CHOICE MD 21229', 4567890123, 'THE RING');
INSERT INTO CUSTOMERS_S VALUES(14, 'ANDY BREW', '4700 WESTLAND MD 21227', 5678901234, 'GONE GIRL');
INSERT INTO CUSTOMERS_S VALUES(15, 'CINDY JANE', '600 HANOVER 21700', 6789012345, 'GONE GIRL');

----PURCHASES TABLE
INSERT INTO PURCHASES_S(PID, CID, PRODUCT_SOLD, CUSTOMER, QUANTITY, AMOUNT) VALUES(20, 10, 'GONE GIRL', 'SELENA GOMEZ', 2, 50);
INSERT INTO PURCHASES_S (PID, CID, PRODUCT_SOLD, CUSTOMER, QUANTITY, AMOUNT) VALUES(21, 11,'89', 'SERENA WILLIAMS', 0, 18);
INSERT INTO PURCHASES_S(PID, CID, PRODUCT_SOLD, CUSTOMER, QUANTITY, AMOUNT) VALUES(22, 12, 'THE ESSENTIAL MJ', 'CHRIS BROWN', 4, 3.99 );
INSERT INTO PURCHASES_S (PID, CID, PRODUCT_SOLD, CUSTOMER, QUANTITY, AMOUNT) VALUES(23,13, 'THE RING', 'JAY ZEE', 4, 15);
INSERT INTO PURCHASES_S (PID, CID, PRODUCT_SOLD, CUSTOMER, QUANTITY, AMOUNT) VALUES(24,14,  'GONE GIRL', 'ANDY BREW', 1, 25 );
INSERT INTO PURCHASES_S (PID, CID, PRODUCT_SOLD, CUSTOMER, QUANTITY, AMOUNT) VALUES(25, 15, 'GONE GIRL', 'CINDY JANE', 0, 25);


/* KEYS table containing all the keywords in SQL */

CREATE TABLE KEYS(
keywords varchar(100)
);


INSERT INTO KEYS VALUES('ADD');
INSERT INTO KEYS VALUES('CONSTRAINT');
INSERT INTO KEYS VALUES('ALL');
INSERT INTO KEYS VALUES('ALTER');
INSERT INTO KEYS VALUES('COLUMN');
INSERT INTO KEYS VALUES('AND');
INSERT INTO KEYS VALUES('ANY');
INSERT INTO KEYS VALUES('AS');
INSERT INTO KEYS VALUES('ASC');
INSERT INTO KEYS VALUES('BACKUP');
INSERT INTO KEYS VALUES('BETWEEN');
INSERT INTO KEYS VALUES('BY');
INSERT INTO KEYS VALUES('CASE');
INSERT INTO KEYS VALUES('CHECK');
INSERT INTO KEYS VALUES('CONSTRAINT');
INSERT INTO KEYS VALUES('CREATE');
INSERT INTO KEYS VALUES('DATABASE');
INSERT INTO KEYS VALUES('DEFAULT');
INSERT INTO KEYS VALUES('DELETE');
INSERT INTO KEYS VALUES('DISTINCT');
INSERT INTO KEYS VALUES('DESC');
INSERT INTO KEYS VALUES('DROP');
INSERT INTO KEYS VALUES('EXEC');
INSERT INTO KEYS VALUES('EXISTS');
INSERT INTO KEYS VALUES('FOREIGN');
INSERT INTO KEYS VALUES('FROM');
INSERT INTO KEYS VALUES('FULL');
INSERT INTO KEYS VALUES('GROUP');
INSERT INTO KEYS VALUES('HAVING');
INSERT INTO KEYS VALUES('IN');
INSERT INTO KEYS VALUES('INTO');
INSERT INTO KEYS VALUES('INDEX');
INSERT INTO KEYS VALUES('INNER');
INSERT INTO KEYS VALUES('INTO');
INSERT INTO KEYS VALUES('INSERT');
INSERT INTO KEYS VALUES('IS');
INSERT INTO KEYS VALUES('JOIN');
INSERT INTO KEYS VALUES('KEY');
INSERT INTO KEYS VALUES('LEFT');
INSERT INTO KEYS VALUES('LIKE');
INSERT INTO KEYS VALUES('LIMIT');
INSERT INTO KEYS VALUES('NOT');
INSERT INTO KEYS VALUES('NULL');
INSERT INTO KEYS VALUES('ON');
INSERT INTO KEYS VALUES('ONLY');
INSERT INTO KEYS VALUES('OR');
INSERT INTO KEYS VALUES('ORDER');
INSERT INTO KEYS VALUES('OUTER');
INSERT INTO KEYS VALUES('PRIMARY');
INSERT INTO KEYS VALUES('PROCEDURE');
INSERT INTO KEYS VALUES('RIGHT');
INSERT INTO KEYS VALUES('ROWNUM');
INSERT INTO KEYS VALUES('SELECT');
INSERT INTO KEYS VALUES('SET');
INSERT INTO KEYS VALUES('TABLE');
INSERT INTO KEYS VALUES('TRUNCATE');
INSERT INTO KEYS VALUES('UNION');
INSERT INTO KEYS VALUES('UNIQUE');
INSERT INTO KEYS VALUES('UPDATE');
INSERT INTO KEYS VALUES('VALUES');
INSERT INTO KEYS VALUES('VIEW');
INSERT INTO KEYS VALUES('WHERE');



--Creating of a metadata table
CREATE TABLE tb_metaData 
(
    GlobalRepresentation	varchar(300),
    ColumnNameLocalDB1Anna	varchar(300),
    DataTypeDB1	varchar(300),
    MappingDB1	varchar(300),
    ColumnNameLocalDB2Camille	varchar(300),
    DataTypeDB2	varchar(300),
    MappingDB2	varchar(300),
    ColumnNameLocalDB3Sumra	varchar(300),
    DataTypeDB3	varchar(300),
    MappingDB3	varchar(300),
    ColumnNameLocalDB4Pravin	varchar(300),
    DataTypeDB4	varchar(300),
    MappingDB4	varchar(300),
primary key (GlobalRepresentation)
);


-- inserting values into metadata table
INSERT INTO TB_METADATA VALUES ('CUSTOMER_TB','TB_CUSTOMER','TABLE','TB_CUSTOMER','CUSTOMERS','TABLE','CUSTOMERS','CUSTOMERS_S','TABLE','CUSTOMERS_S','CUSTOMER','TABLE','CUSTOMER');
INSERT INTO TB_METADATA VALUES 
('CUSTOMER_ID','CID','INT','TB_CUSTOMER.CID','CUSTOMER_ID','INTEGER','CUSTOMERS.CUSTOMER_ID','CID','INT','CUSTOMERS_S.CID','CUSTOMER_ID','INT','CUSTOMER.CUSTOMER_ID');
INSERT INTO TB_METADATA VALUES 
('CUSTOMER_NAME','CNAME','VARCHAR(40)','CNAME','NAME_C','VARCHAR(50)','NAME','NAME','VARCHAR(100)','NAME','CNAME','VARCHAR(20)','CNAME');
INSERT INTO TB_METADATA VALUES 
('CUSTOMER_DOB','CDOB','DATE','CDOB','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL');
INSERT INTO TB_METADATA VALUES 
('CUSTOMER_ADDRESS','CADDRESS','VARCHAR(40)','CADDRESS','ADDRESS','VARCHAR(50)','ADDRESS','ADDRESS','VARCHAR(100)','ADDRESS','CADDRESS','VARCHAR(30)','CADDRESS');
INSERT INTO TB_METADATA VALUES 
('CUSTOMER_PHONE','CPHONE ','VARCHAR(11)','CPHONE','PHONE_NUMBER','VARCHAR(15)','PHONE_NUMBER','PHONE','INT','PHONE','PHONE','INT','PHONE');
INSERT INTO TB_METADATA VALUES ('CUSTOMER_EMAIL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','EMAIL','VARCHAR(20)','EMAIL');
INSERT INTO TB_METADATA VALUES 
('CUSTOMER_CREATED_BY','CCREATED _BY','INT','CCREATED _BY','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL');
INSERT INTO TB_METADATA VALUES 
('PRODUCT1_TB','TB_BOOKS','TABLE','TB_BOOKS','BOOKS','TABLE','BOOKS','BOOKS_S','TABLE','BOOKS_S','NULL','TABLE','DUAL');
INSERT INTO TB_METADATA VALUES 
('PRODUCT1_ID','BID','VARCHAR(13)','BID','ISBN','CHAR(13)','ISBN','ISBN','INT','ISBN','NULL','NULL','NULL');
INSERT INTO TB_METADATA VALUES 
('PRODUCT1_NAME','BTITLE','VARCHAR(50)','BTITLE','TITLE','VARCHAR(50)','TITLE','TITLE','VARCHAR(100)','TITLE','NULL','NULL','NULL');
INSERT INTO TB_METADATA VALUES 
('PRODUCT1_QTY','BQUANTITY','INT','BQUANTITY','QUANTITY','INTEGER','QUANTITY','NULL','NULL','NULL','NULL','NULL','NULL');
INSERT INTO TB_METADATA VALUES 
('PRODUCT1_PRICE','BPRICE','NUMBER','BPRICE','PRICE','DECIMAL(4,2)','PRICE','PRICE','FLOAT','PRICE','NULL','NULL','NULL');
INSERT INTO TB_METADATA VALUES 
('PRODUCT1_AUTHOR','BAUTHOR','VARCHAR(30)','BAUTHOR','AUTHOR','VARCHAR(50)','AUTHOR','AUTHOR','VARCHAR(100)','AUTHOR','NULL','NULL','NULL');
INSERT INTO TB_METADATA VALUES 
('PRODUCT1_CATEGORY','BGENRE','VARCHAR(10)','BGENRE','CATEGORY','VARCHAR(30)','CATEGORY','CATEGORY','VARCHAR(100)','CATEGORY','NULL','NULL','NULL');
INSERT INTO TB_METADATA VALUES 
('PRODUCT1_PUBLISHER','BPUBLISHER','VARCHAR(30)','BPUBLISHER','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL');
INSERT INTO TB_METADATA VALUES 
('PRODUCT1_KEYWORDS','BKEYWORDS','VARCHAR(50)','BKEYWORDS','KEYWORDS','VARCHAR(100)','KEYWORDS','KEYWORDS','VARCHAR(100)','KEYWORDS','NULL','NULL','NULL');
INSERT INTO TB_METADATA VALUES 
('PRODUCT1__USERID','BCREATED_BY','INT','BCREATED_BY','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL');
INSERT INTO TB_METADATA VALUES 
('PRODUCT2_TB','TB_MUSICCD','TABLE','TB_MUSICCD','MUSIC_CDS','TABLE','MUSIC_CDS','MUSIC_CDS_S','TABLE','MUSIC_CDS_S','NULL','TABLE','DUAL');
INSERT INTO TB_METADATA VALUES 
('PRODUCT2_ID','MID','INT','MID','CD_ID','INTEGER','CD_ID','ID','INT','MUSIC_CDS_S.ID','NULL','NULL','NULL');
INSERT INTO TB_METADATA VALUES 
('PRODUCT2_NAME','MTITLE','VARCHAR(30)','MTITLE','TITLE','VARCHAR(50)','TITLE','TITLE','VARCHAR(100)','TITLE','NULL','NULL','NULL');
INSERT INTO TB_METADATA VALUES 
('PRODUCT2_QTY','MQUANTITY','INT','MQUANTITY','QUANTITY','INTEGER','QUANTITY','NULL','NULL','NULL','NULL','NULL','NULL');
INSERT INTO TB_METADATA VALUES 
('PRODUCT2_PRICE','MPRICE','NUMBER','MPRICE','PRICE','DECIMAL(4,2)','PRICE','PRICE','FLOAT','PRICE','NULL','NULL','NULL');
INSERT INTO TB_METADATA VALUES 
('PRODUCT2_RECORDINGCOMPANY','MRECORDING_COMPANY','VARCHAR(30)','MRECORDING_COMPANY','RECORDING_COMPANY','VARCHAR(30)','RECORDING_COMPANY','RECORDING_COMPANY','VARCHAR(100)','RECORDING_COMPANY','NULL','NULL','NULL');
INSERT INTO TB_METADATA VALUES 
('PRODUCT2_ARTIST','MARTIST','VARCHAR(30)','MARTIST','ARTIST','VARCHAR(50)','ARTIST','ARTIST','VARCHAR(100)','ARTIST','NULL','NULL','NULL');
INSERT INTO TB_METADATA VALUES 
('PRODUCT2_GENRE','MGENRE','VARCHAR(10)','MGENRE','GENRE','VARCHAR(30)','GENRE','GENRE','VARCHAR(100)','GENRE','NULL','NULL','NULL');
INSERT INTO TB_METADATA VALUES 
('PRODUCT2_YEAR','MYEAR','NUMBER(4)','MYEAR','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL');
INSERT INTO TB_METADATA VALUES 
('PRODUCT3_TB','NULL','TABLE','DUAL','NULL','TABLE','DUAL','NULL','TABLE','DUAL','PRODUCT','TABLE','PRODUCT');
INSERT INTO TB_METADATA VALUES 
('PRODUCT3_ID','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','PRODUCT_ID','INT','PRODUCT_ID');
INSERT INTO TB_METADATA VALUES 
('PRODUCT3_NAME','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','PNAME','VARCHAR(20)','PNAME');
INSERT INTO TB_METADATA VALUES 
('PRODUCT3_QTY','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','QUANTITY','INT','QUANTITY');
INSERT INTO TB_METADATA VALUES ('PRODUCT3_DESCRIPTION','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','DESCRIPTION','VARCHAR(50)','DESCRIPTION');
INSERT INTO TB_METADATA VALUES 
('PRODUCT3_PRICE','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','PRICE','INT','PRICE');
INSERT INTO TB_METADATA VALUES 
('PURCHASE_TB','TB_PURCHASE','TABLE','TB_PURCHASE','PURCHASES','TABLE','PURCHASES','PURCHASES_S','TABLE','PURCHASES_S','ORDERS','TABLE','ORDERS');
INSERT INTO TB_METADATA VALUES 
('PURCHASE_ID','PID','INT','PID','PURCHASE_ID','INTEGER','PURCHASE_ID','PID','INT','PID','ORDER_NUMBER','INT','ORDER_NUMBER');
INSERT INTO TB_METADATA VALUES 
('PURCHASE_USERID','PCREATED_BY','INT','PCREATED_BY','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL');
INSERT INTO TB_METADATA VALUES 
('PURCHASE_AMOUNT','PAMOUNT ','NUMBER','PAMOUNT','COST_P','DECIMAL(6,2)','COST','AMOUNT','FLOAT','PURCHASES_S.AMOUNT','TOTAL_PRICE','INT','ORDERS.TOTAL_PRICE');
INSERT INTO TB_METADATA VALUES 
('PURCHASE_DATE','PDATE ','TIMESTAMP','TB_PURCHASE.PDATE','NULL','NULL','NULL','NULL','NULL','NULL','ORDER_DATE','DATE','ORDERS.ORDER_DATE');
INSERT INTO TB_METADATA VALUES 
('PURCHASE_CUSTOMER','PCUSTOMER','INT ','TB_PURCHASE.PCUSTOMER','CUSTOMER_ID','INTEGER','PURCHASES.CUSTOMER_ID','CID','INT','PURCHASES_S.CID','CUSTOMER_ID','INT','ORDERS.CUSTOMER_ID');
INSERT INTO TB_METADATA VALUES 
('PURCHASE_DETAILS_TB','TB_PDETAILS','TABLE','TB_PDETAILS','NULL','TABLE','DUAL','NULL','TABLE','DUAL','NULL','TABLE','DUAL');
INSERT INTO TB_METADATA VALUES 
('PURCHASE_QUANTITY','PQUANTITY','INT','PQUANTITY','QUANTITY_PURCHASED','INTEGER','PURCHASES.QUANTITY_PURCHASED','QUANTITY','VARCHAR(100)',
'PURCHASES_S.QUANTITY','NUMBER_OF_LINE_ITEMS','INT','NUMBER_OF_LINE_ITEMS');
INSERT INTO TB_METADATA VALUES 
('PRODUCT1_SOLD','PBOOKSOLD','VARCHAR(13)','PBOOKSOLD','NULL','NULL','NULL','PRODUCT_SOLD','VARCHAR(100)','PRODUCT_SOLD','NULL','NULL','NULL');
INSERT INTO TB_METADATA VALUES 
('PRODUCT2_SOLD','PCDSOLD','INT','SELECT PCDSOLD FROM TB_PDETAILS','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL');
INSERT INTO TB_METADATA VALUES 
('USER_TB','TB_USERINFO','TABLE','TB_USERINFO','NULL','TABLE','DUAL','NULL','TABLE','DUAL','NULL','TABLE','DUAL');
INSERT INTO TB_METADATA VALUES 
('USER_ID','USRID','INT','USRID','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL');
INSERT INTO TB_METADATA VALUES 
('USER_NAME','UNAME','VARCHAR(30)','UNAME','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL');
INSERT INTO TB_METADATA VALUES 
('USER_STATUS','USTATUS','INT','USTATUS','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL');
INSERT INTO TB_METADATA VALUES ('PAYMENT_TB','NULL','TABLE','DUAL','NULL','TABLE','DUAL','NULL','TABLE','DUAL','PAYMENT_DETAILS','TABLE','PAYMENT_DETAILS');
INSERT INTO TB_METADATA VALUES 
('PAYMENT_ID','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','PAYMENT_ID','INT','PAYMENT_ID');
INSERT INTO TB_METADATA VALUES ('ORDER_NUMBER','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','ORDER_NUMBER','INT','ORDER_NUMBER');
INSERT INTO TB_METADATA VALUES ('CARD_NUMBER','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','CARD_NUMBER','INT','CARD_NUMBER');
INSERT INTO TB_METADATA VALUES ('ORDER_ITEM_TB','NULL','TABLE','DUAL','NULL','TABLE','DUAL','NULL','TABLE','DUAL','LINE_ITEMS','TABLE','LINE_ITEMS');
INSERT INTO TB_METADATA VALUES ('ITEM_NUMBER','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','ITEM_NUMBER','INT','ITEM_NUMBER');
INSERT INTO TB_METADATA VALUES ('QUANTITY_ORDERED','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','QUANTITY_ORDERED','INT','QUANTITY_ORDERED');
INSERT INTO TB_METADATA VALUES ('PRODUCT_ID','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','PRODUCT_ID','INT','PRODUCT_ID');





/* Procedure getNextTokenAndDelim takes a varchar (sql query) as input and outputs the next token in the varchar
and the next delimiter (ie punctuation/space). If there are two or three delimiters in a row, it outputs all of them. */
CREATE OR REPLACE PROCEDURE getNextTokenAndDelim(str IN varchar, t OUT varchar, nextDelim OUT varchar)
IS
BEGIN 

nextDelim := REGEXP_SUBSTR(str, ' |,|;|\>|\<|\.|\(|\)|=|''', 1, 1); /* finding next delimiter */

/*
if char after nextdelim is also a delim
then nextdelim = nextdelim + nextchar
*/
if instr(str, REGEXP_SUBSTR(str, ' |,|;|\>|\<|\.|\(|\)|=|''', 1, 2), 1, 1) = instr(str, nextDelim, 1, 1)+1
then nextDelim := nextDelim || REGEXP_SUBSTR(str, ' |,|;|\>|\<|\.|\(|\)|=|''', 1, 2);
end if;

if instr(str, REGEXP_SUBSTR(str, ' |,|;|\>|\<|\.|\(|\)|=|''', 1, 3), 1, 1) = instr(str, nextDelim, 1, 1)+2
then nextDelim := nextDelim || REGEXP_SUBSTR(str, ' |,|;|\>|\<|\.|\(|\)|=|''', 1, 3);
end if;

/*if nextDelim is null, this means there is no delimiter after the token
(aka we are at the end of the subquery */
if nextDelim IS NULL 
then t:= substr(str, 0, length(str)); 
else -- else we are not at the end of the subquery and can use nextDelim to locate the end of the token
t := substr(str, 0, instr(str, nextDelim, 1, 1)-1); /*finding next token using substring and instring */
end if;

EXCEPTION -- exception handling
when no_data_found then 
dbms_output.put_line('No data found');
when others then 
dbms_output.put_line('Error');

END; 
/ 

/* Procedure outputLocalMappings takes a token as input, and outputs the mapping from each of the local databases from the table tb_metadata */
CREATE OR REPLACE PROCEDURE outputLocalMappings(token IN varchar, localMapping1 OUT varchar, localMapping2 OUT varchar, localMapping3 OUT varchar, localMapping4 OUT varchar)
IS
cursor v_token is select GLOBALREPRESENTATION, MAPPINGDB1, MAPPINGDB2, MAPPINGDB3, MAPPINGDB4, DATATYPEDB1, DATATYPEDB2, DATATYPEDB3, DATATYPEDB4 from TB_METADATA;
globalrep tb_metadata.GLOBALREPRESENTATION%type;
mapping1 varchar(300);
mapping2 varchar(300);
mapping3 varchar(300);
mapping4 varchar(300);
dataType1 varchar(50); 
dataType2 varchar(50); 
dataType3 varchar(50); 
dataType4 varchar(50); 

/* Using cursor to fetch mappings */
BEGIN
open v_token;
LOOP
fetch v_token into globalrep,mapping1,mapping2,mapping3,mapping4, dataType1, dataType2, dataType3, dataType4;
if globalrep = token then
checkNum(mapping1, dataType1); --checking if the datatype is numerical and converting to varchar for final UNION
checkNum(mapping2, dataType2);
checkNum(mapping3, dataType3);
checkNum(mapping4, dataType4);
localMapping1 := mapping1;
localMapping2 := mapping2;
localMapping3 := mapping3;
localMapping4 := mapping4;
EXIT;
elsif globalrep IS NULL then
EXIT;
end if;
END LOOP;
close v_token;
END;
/

/* Procedure checkNull verifies whether a local mapping is null, and if so it casts the NULL as a varchar 
since output tables cannot have zero-length columns */
CREATE OR REPLACE PROCEDURE checkNull(mappingStr IN OUT varchar)
IS
BEGIN
if mappingStr = 'NULL' then
mappingStr := 'CAST(NULL AS varchar(10))';
end if;
END;
/

/* Procedure checkNum verifies whether the datatype of a mapping is numerical, and if so converts it to
a varchar. This is to avoid type mismatches when joining the tables using UNION */
CREATE OR REPLACE PROCEDURE checkNum(mappingStr IN OUT varchar, datatype IN varchar)
IS
BEGIN
if instr(datatype, 'INT') > 0 OR instr(datatype, 'NUM') > 0 OR instr(datatype, 'DECIMAL') > 0 OR instr(datatype, 'FLOAT') > 0 then
mappingStr := 'to_char(' || mappingStr || ')';
end if;
END;
/

/* Procedure createSubqueries takes a global query as input, and outputs subqueries. It checks whether each token is a keyword, 
contained in the metadata table, or neither */
CREATE OR REPLACE PROCEDURE createSubqueries(str IN varchar, subquery1 OUT varchar, subquery2 OUT varchar, subquery3 OUT varchar, subquery4 OUT varchar)
IS
token varchar(50);
nextDelim varchar(10);
startPos number; /* starting position of the new tempString once a token has been removed */
tempString varchar(300); /* this varchar is assigned the same value as the input string, then tokens are removed from it until tempString is empty */

mapping1 varchar(300);
mapping2 varchar(300);
mapping3 varchar(300);
mapping4 varchar(300);

numKey number;
numMeta number;
BEGIN

/* initializing variables */
startPos := 0;
tempString := UPPER(str);

dbms_output.put_line(chr(10));
dbms_output.put_line('Global Query: ' || str);


/* loop iterates until all tokens have been removed from tempString */
WHILE length(tempString) > 0 
LOOP

getNextTokenAndDelim(tempString, token, nextDelim); /* getting next token from tempString */
--dbms_output.put_line('Token: ' || token); /* printing out token */

SELECT count(*) INTO numKey FROM KEYS WHERE keywords = token; --checks number of times token occurs in keywords table
SELECT count(*) INTO numMeta FROM tb_metadata WHERE GlobalRepresentation = token; --checks number of times token occurs in metadata table


if numKey > 0 then --if token is keyword
subquery1 := subquery1 || token || nextDelim; --appending to subquery string
subquery2 := subquery2 || token || nextDelim;
subquery3 := subquery3 || token || nextDelim;
subquery4 := subquery4 || token || nextDelim;
elsif numMeta > 0 then --if token is in metadata table
outputLocalMappings(token, mapping1, mapping2, mapping3, mapping4); --retrieving local mappings
checkNull(mapping1); --checking if the mapping is NULL and casting it to varchar to avoid zero-length column error
checkNull(mapping2);
checkNull(mapping3);
checkNull(mapping4);
subquery1 := subquery1 || mapping1 || nextDelim;
subquery2 := subquery2 || mapping2 || nextDelim;
subquery3 := subquery3 || mapping3 || nextDelim;
subquery4 := subquery4 || mapping4 || nextDelim;
else
subquery1 := subquery1 || token || nextDelim;
subquery2 := subquery2 || token || nextDelim;
subquery3 := subquery3 || token || nextDelim;
subquery4 := subquery4 || token || nextDelim;
end if;

/* startPos is the position in tempString after the token ends, where the rest of the string starts */
startPos := instr(tempString, token, 1)+ length(token) +length(nextDelim);

/* removing token from tempString */
tempString := substr(tempString, startPos, length(tempString));

END LOOP;

/* printing subqueries to console */
dbms_output.put_line('Subquery 1: ' || subquery1);
dbms_output.put_line('Subquery 2: ' || subquery2);
dbms_output.put_line('Subquery 3: ' || subquery3);
dbms_output.put_line('Subquery 4: ' || subquery4);


END;
/


/* Procedure createOutputTables adds subquery results to temporary tables using dynamic sql, 
then outputs the results using showRows procedure */
CREATE OR REPLACE PROCEDURE createOutputTables(globalquery varchar)
IS
subquery1 varchar(300);
subquery2 varchar(300);
subquery3 varchar(300);
subquery4 varchar(300);
final_unionstmt varchar(300);
BEGIN

createSubqueries(globalQuery, subquery1, subquery2, subquery3, subquery4); -- retrieving subqueries

-- creating temporary tables to store subquery output
execute immediate 'CREATE TABLE tempTable AS ' || subquery1;
execute immediate 'CREATE TABLE tempTable2 AS ' || subquery2;
execute immediate 'CREATE TABLE tempTable3 AS ' || subquery3;
execute immediate 'CREATE TABLE tempTable4 AS ' || subquery4;

-- using UNION to join the subquery tables together into a single merged table
final_unionstmt := 'SELECT * FROM tempTable UNION SELECT * FROM tempTable2 UNION SELECT * FROM tempTable3 UNION SELECT * FROM tempTable4';

-- creating table to store UNION output
execute immediate 'create table merged_results AS ' || final_unionstmt;

/* printing out table results */
dbms_output.put_line(CHR(10));
dbms_output.put_line('TABLE 1:');
showRows('tempTable');
dbms_output.put_line(CHR(10));

dbms_output.put_line('TABLE 2:');
showRows('tempTable2');
dbms_output.put_line(CHR(10));

dbms_output.put_line('TABLE 3:');
showRows('tempTable3');
dbms_output.put_line(CHR(10));

dbms_output.put_line('TABLE 4:');
showRows('tempTable4');

dbms_output.put_line(CHR(10));
dbms_output.put_line('MERGED RESULTS: ');
showRows('merged_results');

execute immediate 'DROP TABLE tempTable';
execute immediate 'DROP TABLE tempTable2';
execute immediate 'DROP TABLE tempTable3';
execute immediate 'DROP TABLE tempTable4';
execute immediate 'DROP TABLE merged_results';


END;
/

/* Procedure showRows uses a cursor to display the results of an input table */
CREATE OR REPLACE PROCEDURE showRows(input_table varchar2)
IS
CURSOR c1 IS SELECT * FROM all_tab_columns WHERE table_name = upper(input_table);
type table_output is table of varchar2(30000); 
work table_output;
v_statement varchar2(2000);
column_names varchar(300);
BEGIN
  v_statement := 'select ';
  column_names := '';
  FOR p IN c1 LOOP
    v_statement := v_statement || p.column_name || ' || '' '' || ';
    column_names := column_names || p.column_name || '   ||   ';
  
  END LOOP;
  v_statement := rtrim (v_statement, ' |''') || ' from ' || input_table;
  dbms_output.put_line (column_names);
  execute immediate v_statement
     bulk collect INTO work;
  for i in 1..work.COUNT loop
    dbms_output.put_line(work(i));
  end loop;
END;
/


/* Anonymous PL/SQL block assigns global queries and outputs the results of the local subqueries using stored procedures */
DECLARE
globalQuery1 varchar(300);
globalQuery2 varchar(300);
globalQuery3 varchar(300);
globalQuery4 varchar(300);
globalQuery5 varchar(300);
globalQuery6 varchar(300);
BEGIN
/* selecting books with author Gillian Flynn */
globalQuery1 := 'SELECT (PRODUCT1_ID) AS Prod_ID,(PRODUCT1_NAME) AS Prod_Name,(PRODUCT1_AUTHOR) AS Prod_Author FROM PRODUCT1_TB WHERE(PRODUCT1_AUTHOR)=''Gillian Flynn''';
/* selecting music CDs with artist Michael Jackson */
globalQuery2 := 'SELECT (PRODUCT2_ID) AS Prod_ID,(PRODUCT2_NAME) AS Prod_Name,(PRODUCT2_ARTIST) AS Prod_Artist FROM PRODUCT2_TB WHERE(PRODUCT2_ARTIST)=''Michael Jackson''';
/*selecting purchase/order information */
globalQuery3 := 'SELECT (PURCHASE_ID) AS Order_ID, (PURCHASE_AMOUNT) AS Order_Amount, (PURCHASE_CUSTOMER) AS Order_Customer FROM PURCHASE_TB'; 
/*selecting books and cds with quantity >= 3 */
globalQuery4 := 'SELECT (PRODUCT1_NAME) AS Prod_Name,(PRODUCT1_QTY) AS Prod_Quantity FROM PRODUCT1_TB WHERE (PRODUCT1_QTY)>=3 
UNION SELECT (PRODUCT2_NAME) AS Prod_Name,(PRODUCT2_QTY) AS Prod_Quantity FROM PRODUCT2_TB WHERE (PRODUCT2_QTY)>=3';
/* selecting all purchases of customers with customer id 10 */
globalQuery5 := 'SELECT (PURCHASE_ID) AS Order_ID,(PURCHASE_CUSTOMER) AS Order_Customer,(PURCHASE_AMOUNT) AS Order_Amount FROM PURCHASE_TB WHERE (PURCHASE_CUSTOMER)=10';
/* selecting purchase and customer information (what each customer purchased) */
globalQuery6 := 'SELECT (PURCHASE_ID) AS Order_ID, (PURCHASE_AMOUNT) AS Order_Amount, (CUSTOMER_NAME) AS Customer_Name, (CUSTOMER_ADDRESS) AS Customer_Address FROM PURCHASE_TB INNER JOIN CUSTOMER_TB ON (PURCHASE_CUSTOMER)=(CUSTOMER_ID)';

dbms_output.put_line('Query 1: Displaying books where author = Gillian Flynn: ');
createOutputTables(globalQuery1);

dbms_output.put_line(CHR(10));
dbms_output.put_line('Query 2: Displaying CDs where artist = Michael Jackson: ');
createOutputTables(globalQuery2);

dbms_output.put_line(CHR(10));
dbms_output.put_line('Query 3: Displaying purchase/order information: ');
createOutputTables(globalQuery3);

dbms_output.put_line(CHR(10));
dbms_output.put_line('Query 4: Displaying products with quantity >= 3: ');
createOutputTables(globalQuery4);

dbms_output.put_line(CHR(10));
dbms_output.put_line('Query 5: Showing purchases of customer with customer ID 10: ');
createOutputTables(globalQuery5);

dbms_output.put_line(CHR(10));
dbms_output.put_line('Query 6: Showing purchase and customer information: ');
createOutputTables(globalQuery6);


END;
/




